{{- if .Values.externalSecret.enabled }}
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ .Release.Name }}-es
  namespace: argocd
spec:
  data:
    - remoteRef:
        conversionStrategy: Default
        decodingStrategy: None
        key: {{ .Values.externalSecret.key | default "my_clusters" }}
        metadataPolicy: None
        property: {{ .Values.externalSecret.property | default .Release.Name }}
      secretKey: config
  refreshInterval: {{ .Values.externalSecret.refreshInterval | default "5m" }}
  secretStoreRef:
    kind: {{ .Values.externalSecret.secretStoreKind | default "ClusterSecretStore" }}
    name: {{ .Values.externalSecret.secretStoreName | default "controlplane-production" }}
  target:
    creationPolicy: Owner
    deletionPolicy: Retain
    name: {{ .Values.externalSecret.targetName | default (printf "%s-cluster-secret" .Release.Name) }}
    template:
      data:
        config: '{{`{{ $k8sconfig := .config | fromYaml }}{{- $cluster := (index $k8sconfig.clusters 0) -}}{{- $user := (index $k8sconfig.users 0) -}}{{ printf "{\"bearerToken\":\"\",\"tlsClientConfig\":{\"caData\":%s,\"certData\":%s,\"insecure\":%s,\"keyData\":%s}}" (index $cluster.cluster "certificate-authority-data" | toJson) (index $user.user "client-certificate-data" | toJson) "false" (index $user.user "client-key-data" | toJson) }}`}}'
        name: {{ .Values.externalSecret.clusterName | default .Release.Name }}
        project: {{ .Values.externalSecret.project | default "controlplane-production" }}
        server: '{{`{{ $k8sconfig := .config | fromYaml }}{{- $cluster := (index $k8sconfig.clusters 0) -}}{{ $cluster.cluster.server }}`}}'
      engineVersion: v2
      mergePolicy: Replace
      metadata:
        labels:
          argocd.argoproj.io/secret-type: cluster
          argocd: enabled
{{- end }}
